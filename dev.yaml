---
- name: Dev environment for Ubuntu
  hosts: Larsen, Gotham, Cheet
  become: yes
  gather_facts: false
  tasks:
    - name: update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: upgrade all packages
      ansible.builtin.apt:
        upgrade: dist

    - name: install specific packages
      ansible.builtin.apt:
        name:
          - tmux
          - curl 
          - nodejs
          - npm
          - build-essential
          - git
          - wget
        state: present 


  # Nvim
  - name: Clone nvim repository
    git:
      repo: https://github.com/neovim/neovim
      dest: "{{ ansible_env.HOME }}/src/nvim"
      clone: true
      version: "v6.0.0"

  - name: Install nvim build dependencies
    become: true
    apt:
      name:
        - ninja-build
        - gettext
        - libtool
        - libtool-bin
        - autoconf
        - automake
        - cmake
        - g++
        - pkg-config
        - unzip
        - curl
      state: present

  - name: Build nvim release version
    community.general.make:
      chdir: deps/neovim
      params:
        CMAKE_BUILD_TYPE: Release

  - name: Install nvim release version
    become: true
    community.general.make:
      chdir: deps/neovim
      target: install

# Git magic
  - name: Git dotfiles
    hosts: all
    gather_facts: false
    tasks:
      - name: Tmux configs
        git:
          repo: 'https://github.com/acesanderson/util_tmux_settings'
          dest: '~/.config/tmux'
          clone: yes
          update: yes
      - name: Nvim configs
        git:
          repo: 'https://github.com/acesanderson/util_nvim_settings'
          dest: '~/.config/nvim'
          clone: yes
          update: yes
      - name: Docker configs
        git:
          repo: 'https://github.com/acesanderson/util_dockerfiles'
          dest: '~/Docker'
          clone: yes
          update: yes

  - name: Brian_Code python projects
    hosts: all
    gather_facts: false
    vars:
      base_dir: "Brian_Code"
      repositories:
        - repo_url: "https://github.com/yourusername/repo1.git"
          dest_dir: "project1"
        - repo_url: "https://github.com/yourusername/repo2.git"
          dest_dir: "project2"
        # Add more repositories as needed

  tasks:
    - name: Ensure base directory exists
      file:
        path: "{{ base_dir }}"
        state: directory
        mode: '0755'

    - name: Clone repositories
      git:
        repo: "{{ item.repo_url }}"
        dest: "{{ base_dir }}/{{ item.dest_dir }}"
        clone: yes
        update: yes
      loop: "{{ repositories }}"
      register: git_results

    - name: Show clone results
      debug:
        msg: "Cloned {{ item.item.repo_url }} to {{ item.item.dest_dir }}"
      loop: "{{ git_results.results }}"
      when: item.changed

    # Check if we need to install Python 3.12.4
    - name: Check that the /usr/local/bin/python3.6 exists
      command: which python3.12
      register: python_result
      ignore_errors: yes # Ignore errors if python3.12 not found

    - name: Set exists boolean
      set_fact:
        python_exists: "{{ python_result.stdout != '' }}"

    - name: Display the path or indicate not found
      debug:
        msg: "Python 3.12.4 is installed at {{ python_result.stdout }}"
      when: python_exists

    - name: Indicate that Python 3.12.4 is not installed
      debug:
        msg: "Python 3.12.4 is not installed"
      when: python_exists == False

    # Install Python 3.12.4
    - name: Install python build dependencies
      ansible.builtin.apt:
        name:
           - name: Install Python build dependencies
             apt:
               name:
               - build-essential
               - libssl-dev
               - zlib1g-dev
               - libbz2-dev
               - libreadline-dev
               - libsqlite3-dev
               - libncursesw5-dev
               - xz-utils
               - tk-dev
               - libxml2-dev
               - libxmlsec1-dev
               - libffi-dev
               - liblzma-dev
             state: present
             become: yes
      when: python_exists == False

    # Set up python dev environment
    # https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz
    - name: download python tarball
      get_url:
        url: https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz
        dest: /tmp/Python-3.12.4.tar.xz
        mode: '0644'
      when: python_exists == False

    - name: Extract the tarball
      unarchive:
        src: /tmp/Python-3.12.4.tar.xz
        dest: /tmp/
        remote_src: yes
      when: python_exists == False

    - name: Build and install Python
      shell: |
        cd /tmp/Python-3.12.4
        ./configure --enable-optimizations
        make -j $(nproc)
        make altinstall
      args:
        creates: /usr/local/bin/python3.12
      when: python_exists == False

    - name: Clean up
      file:
        path: /tmp/Python-3.12.4
        state: absent
      when: python_exists == False

    - name: Clean up tarball
      file:
        path: /tmp/Python-3.12.4.tar.xz
        state: absent
      when: python_exists == False

# python venv
# bashrc, bash_profile: ensure that base strings are included
# pass
# ssh keygen
# github repos
# apt install: tmux, black, nvim, etc.
#        curl wget git build-essential tmux nodejs npm 
